_default:
  gradle_home: &gradle_home /work/.gradle
  command_options: &cmd_opts
    container: java
    user-id: 1
    external-user-id: 0
    volumes:
      /work/.gradle/caches: !BindRW /vagga/cache/gradle-cache

minimum-vagga: v0.6.1-119

containers:
  java:
    environ:
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
      GRADLE_USER_HOME: *gradle_home
      LANG: en_US.UTF-8
    setup:
    - !UbuntuRelease { codename: xenial }
    - !UbuntuUniverse
    - !Install
      - openjdk-8-jdk-headless
    - !EnsureDir /opt/gradle
    - !Unzip
      url: https://services.gradle.org/distributions/gradle-2.13-bin.zip
      sha256: 0f665ec6a5a67865faf7ba0d825afb19c26705ea0597cec80dd191b0f2cbb664
      subdir: gradle-2.13
      path: /opt/gradle
    - !Sh |
        ln -s /opt/gradle/bin/gradle /usr/local/bin/gradle
    - !Env
      GRADLE_USER_HOME: *gradle_home
    - !CacheDirs {"/work/.gradle/caches": "gradle-cache"}

  elastic:
    setup:
    - !Ubuntu xenial
    - !Install [ca-certificates]
    - !AptTrust
      server: pgp.mit.edu
      keys: [D88E42B4]
    - !UbuntuRepo
      url: https://artifacts.elastic.co/packages/5.x/apt
      suite: stable
      components: [main]
    - !Env
      ES_SKIP_SET_KERNEL_PARAMETERS: true
    - !Install
      - openjdk-8-jre-headless
      - elasticsearch=5.1.1
    - !EnsureDir /var/elasticsearch
    volumes:
      /var/elasticsearch: !Persistent { name: elastic }
    auto-clean: true

  pymorphy2:
    environ:
      HOME: /work
      LANG: en_US.UTF-8
    setup:
    - !UbuntuRelease { codename: xenial }
    - !PipConfig { dependencies: true }
    - !Py3Install
      - pymorphy2
      - pymorphy2-dicts-ru
      - pymorphy2-dicts-uk
      - ipython

commands:
  gradle: !Command
    <<: *cmd_opts
    description: Run arbitrary gradle command
    run: [gradle]

  daemon: !Command
    <<: *cmd_opts
    description: Run gradle daemon
    run: |
      # --foreground option runs daemon with different jvm options
      # so then another gradle process rejects to connect to the daemon
      gradle --dry-run --daemon build
      tail -f /work/.gradle/daemon/2.13/daemon-*.out.log

  compile: !Command
    <<: *cmd_opts
    description: Compile all source files
    run: [gradle, compileJava]

  compile-test: !Command
    <<: *cmd_opts
    description: Compile all test source files
    run: [gradle, compileTestJava]

  build: !Command
    <<: *cmd_opts
    description: Compile, run tests and make packages
    run: [gradle, build]

  assemble: !Command
    <<: *cmd_opts
    description: Build and assemple package
    run: [gradle, assemble]

  clean: !Command
    <<: *cmd_opts
    description: Clean all building files
    run: [gradle, clean]

  test: !Command
    <<: *cmd_opts
    description: Run unit tests
    run: [gradle, test]

  check: !Command
    <<: *cmd_opts
    description: Run all checks and tests
    run: [gradle, check]

  update-shas: !Command
    <<: *cmd_opts
    description: Clean up and update sha hashsums for local artifacts
    run: |
      cd /work/jmorphy2-elasticsearch/licenses
      rm -rf dawg-*.sha1 jmorphy2-*.sha1
      cd ..
      gradle updateShas

  benchmark: !Command
    <<: *cmd_opts
    description: Run benchmarks
    run: [gradle, benchmark]

  elastic: !Command
    description: Run elasticsearch
    container: elastic
    user-id: 1
    external-user-id: 0
    volumes:
      /usr/share/elasticsearch/plugins: !Tmpfs
    run: |
      /usr/share/elasticsearch/bin/elasticsearch-plugin install \
        file:/work/jmorphy2-elasticsearch/build/distributions/analysis-jmorphy2-0.2.0-SNAPSHOT.zip
      /usr/share/elasticsearch/bin/elasticsearch \
        -E path.conf=/etc/elasticsearch \
        -E path.logs=/var/elasticsearch/logs \
        -E path.data=/var/elasticsearch/data

  python: !Command
    description: Run python shell with pymorphy2 package installed
    container: pymorphy2
    run: [ipython]
